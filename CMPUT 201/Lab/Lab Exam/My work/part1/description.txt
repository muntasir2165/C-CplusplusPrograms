The problem is with the "while (&current->id > 0)..." statement in the print_class_list() function. In the while statement, we are checking if the MEMORY ADDRESS of current->id is greater than 0 (which, by the way, it usually is) and thus, we end up printing "end    -1". We also notice a segmentation fault error on the stdout.

Since, the expected output doesn't include "end    -1", I hypothesized that changing "&current->id > 0" to "current->id > 0" would solve the problem. Henceforth, we would be actually comparing the value of id against 0. This seemed to solve the problem, give me the expected output and also, somehow, the seg. fault error disappeared. I tried checking for memory allocation errors (such as buffer overflow or not freeing all the allocated memory in the end) by incorporating memwatch in the given code. However, it seems like all the allocated memory are getting freed appropriately in the end. Thus, I am not sure as to why the segmentation fault error no longer appears in my code but it's gone.

P.S.: The memwatch files (memwatch.c, memwatch.h and memwatch.log) are still in the part1 folder. Also, I have included the line "#include "memwatch.h"" in the part1.c source file. However, when submitting, I have commented out the "#include "memwatch.h"" line in the part1.c file.
